{"version":3,"sources":["components/Images.js","components/Score.js","components/Header.js","components/Banner.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Images","_this","this","_this$props","props","name","image","isClicked","handleClick","react_default","a","createElement","className","onClick","key","alt","src","data-isClicked","Component","Score","Header","branding","href","components_Score","defaultProps","Banner","Footer","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","characters","App","state","score","e","setState","console","log","_this2","components_Header","components_Banner","map","character","components_Images","photo","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAyBeA,0LAnBJ,IAAAC,EAAAC,KAAAC,EAGyCD,KAAKE,MAA7CC,EAHDF,EAGCE,KAAMC,EAHPH,EAGOG,MAAOC,EAHdJ,EAGcI,UAAWC,EAHzBL,EAGyBK,YAChC,OACEC,EAAAC,EAAAC,cAAA,OACEC,UAAU,sBACVC,QAAS,kBAAML,EAAYP,EAAKG,SAEhCK,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,8BAA8BE,IAAKT,GAC/CI,EAAAC,EAAAC,cAAA,OAAKI,IAAI,YAAYC,IAAKV,EAAOW,iBAAgBV,cAfxCW,cCmBNC,mLAjBX,OACEV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0CAAd,mBAIFH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0CAAd,yBAVUM,aCEdE,EAAS,SAAAhB,GAAS,IAEdiB,EAAajB,EAAbiB,SAER,OACEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4DACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGW,KAAK,IAAIV,UAAU,iBACnBS,GAEHZ,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAACY,EAAD,WAUZH,EAAOI,aAAe,CACpBH,SAAU,qBAGGD,QCTAK,mLAlBX,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAAb,sJAPOM,aCaNQ,mLAXX,OACEjB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oEAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACfH,EAAAC,EAAAC,cAAA,uCANWO,oBCYjBS,SAAU,SAASC,GAOrB,IALA,IAEIC,EAAgBC,EAFhBC,EAAeH,EAAMI,OAKlB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,IAITD,EAAQS,OAmDOC,6MAhDbC,MAAQ,CACNF,aACAG,MAAO,KAGT/B,YAAc,SAAAgC,GACZvC,EAAKwC,SAAS,CACZF,MAAOtC,EAAKqC,MAAMC,MAAQ,IAG5BG,QAAQC,IAAI1C,EAAKqC,MAAMC,OAClBC,EAAEjC,YACLmC,QAAQC,IAAI,mBACZD,QAAQC,IAAI,OAAQH,GACpBb,EAAQS,6EAMH,IAAAQ,EAAA1C,KACP,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAACkC,EAAD,CAAQxB,SAAS,eAEjBZ,EAAAC,EAAAC,cAACmC,EAAD,MAGArC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZV,KAAKoC,MAAMF,WAAWW,IAAI,SAAAC,GAAS,OAClCvC,EAAAC,EAAAC,cAACsC,EAAD,CACEnC,IAAKkC,EAAU3C,KACfC,MAAO0C,EAAUE,MACjB3C,UAAWyC,EAAUzC,UACrBC,YAAaoC,EAAKpC,kBAK1BC,EAAAC,EAAAC,cAACwC,EAAD,cA1CUjC,aC1BEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.252b18ee.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Images extends Component {\r\n  // props are accessed via 'this.props..'\r\n  // where this = current object\r\n\r\n  render() {\r\n    // destructure (optional and must be placed in the render\r\n    // console.log('Image props is', this.props);\r\n    const { name, image, isClicked, handleClick } = this.props;\r\n    return (\r\n      <div\r\n        className=\"card card-body mb-3\"\r\n        onClick={() => handleClick(this.props)}\r\n      >\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item text-center\" key={name}>\r\n            <img alt=\"character\" src={image} data-isClicked={isClicked} />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Images;\r\n","import React, { Component } from 'react';\r\n\r\nclass Score extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ul className=\"navbar-nav mr-auto\">\r\n          <li className=\"nav-item text-danger pt-3  scores-text\">\r\n            Current Score:\r\n          </li>\r\n        </ul>\r\n        <ul className=\"navbar-nav mr-auto\">\r\n          <li className=\"nav-item text-primary pb-3 scores-text\">\r\n            Total Score:\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Score;\r\n","import React from 'react';\r\nimport Score from './Score';\r\n//import 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst Header = props => {\r\n  // destructure (else enter: props.branding into <h3> )\r\n  const { branding } = props;\r\n\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-warning mb-3 py-0\">\r\n        <div className=\"container\">\r\n          <a href=\"/\" className=\"branding-link\">\r\n            {branding}\r\n          </a>\r\n          <div>\r\n            {/* insert score component here, will need to pass props I believe */}\r\n            <Score />\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\n// create a default branding in-case no props are passed in\r\n// props from App.js will supercede default\r\nHeader.defaultProps = {\r\n  branding: 'click app is cool'\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nclass Banner extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"container banner mb-3\">\r\n          <div className=\"row\">\r\n            <div className=\"text-center lead text-light\">\r\n              <p className=\"font-weight-bold p-3\">\r\n                Click a Simpons character to score a point. Remember which you\r\n                have already clicked because if you click the same one twice,\r\n                you loose!\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Banner;\r\n","import React, { Component } from 'react';\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <footer className=\"page-footer pager-footer-expand-sm mt-3 bg-warning custom-footer\">\r\n        <div className=\"container\">\r\n          <div className=\"d-flex flex-row\" />\r\n          <p>this is my footer</p>\r\n        </div>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\n// import css and apply to all on page\r\nimport './App.css';\r\nimport Images from './components/Images';\r\nimport Header from './components/Header';\r\nimport Banner from './components/Banner';\r\nimport Footer from './components/Footer';\r\n\r\nimport characters from './characters.json';\r\n\r\n// bootstrap installed via npm and not via index.html\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// randomize characters from json\r\nvar shuffle = function(array) {\r\n  // get current index\r\n  var currentIndex = array.length;\r\n  // declare variables\r\n  var temporaryValue, randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\n// call suffle array on page load\r\nshuffle(characters);\r\n\r\nclass App extends Component {\r\n  state = {\r\n    characters,\r\n    score: 0\r\n  };\r\n\r\n  handleClick = e => {\r\n    this.setState({\r\n      score: this.state.score + 1\r\n    });\r\n\r\n    console.log(this.state.score);\r\n    if (!e.isClicked) {\r\n      console.log('this just fired');\r\n      console.log('e is', e);\r\n      shuffle(characters);\r\n      // console.log(characters);\r\n      // call a function that calls images\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {/* render Header component, send props*/}\r\n        <Header branding=\"Click Game\" />\r\n        {/* render Header component, for game intro*/}\r\n        <Banner />\r\n        {/* render Images component, send props */}\r\n\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            {this.state.characters.map(character => (\r\n              <Images\r\n                key={character.name}\r\n                image={character.photo}\r\n                isClicked={character.isClicked}\r\n                handleClick={this.handleClick}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n    //console.log(this.state.characters);\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}